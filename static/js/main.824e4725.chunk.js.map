{"version":3,"sources":["serviceWorker.js","components/buttens.js","components/list.js","page/home.js","components/Control.js","page/Context.js","components/Todolist.js","page/Demo02.js","page/Demo01.js","page/App.js","page/Hoc.js","homework/Input.js","homework/List.js","homework/TodoList.js","index.js"],"names":["Boolean","window","location","hostname","match","Bnts","props","map","item","key","onClick","getData","List","data","id","title","React","Component","Context","createContext","Demo02","Consumer","changeData","Demo01","style","width","height","defaultProps","name","console","log","withFetch","Com","url","state","fetch","then","res","json","setState","this","Input","content","ref","refs","value","onChange","handleChange","type","addTodo","renderTodos","done","todos","todo","idx","toggle","checked","dangerouslySetInnerHTML","__html","delTodo","td","filter","length","TodoList","e","inpValue","target","index","localStorage","setItem","JSON","stringify","newTodos","parse","input","focus","getItem","inp","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.824e4725.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nconst Bnts=(props)=>{\r\n    const btns = [1,2,3,4,5];\r\n    return <div>\r\n        {\r\n         btns.map(\r\n            (item)=>(\r\n                    <button \r\n                    key={item}\r\n                    // onClick={()=>this.getData(item)}\r\n                    onClick={()=>props.getData(item)}\r\n                    >\r\n                    {item}\r\n                    </button>\r\n                ))   \r\n        }       \r\n    </div>\r\n}\r\n export default Bnts;","import React from 'react';\r\nlet List = (props)=>{\r\n    return <ul>\r\n      {\r\n        props.data.map(\r\n          (item)=><li key={item.id}>{item.title}</li>\r\n        )\r\n      }\r\n    </ul>\r\n  }\r\n  export default List;","import React from 'react';\r\nimport Buttens from '../components/buttens';\r\nimport List from '../components/list';\r\n\r\nclass Home extends React.Component{\r\n    constructor(props){\r\n      super(props);\r\n      this.state = {\r\n        data:[]\r\n      }\r\n      // this.handleClick = this.handleClick.bind(this)\r\n    }\r\n    componentDidMount(){\r\n      fetch('https://cnodejs.org/api/v1/topics')\r\n      .then(res=>res.json())\r\n      .then( ({data}) => {\r\n        this.setState({data})\r\n      })\r\n    }\r\n    getData = (page)=>{\r\n      fetch('https://cnodejs.org/api/v1/topics?page='+page)\r\n      .then(res=>res.json())\r\n      .then( ({data}) => {\r\n        this.setState({data})\r\n      })\r\n    }\r\n    render(){\r\n      const { data } = this.state;\r\n\r\n      return <div>\r\n        <Buttens getData={this.getData}/>\r\n        <List data={data}/>\r\n      </div>\r\n    }\r\n  }\r\n//  let a = 100;\r\n  //命令导出\r\n//  export {home};\r\n//默认导出\r\n  export default Home;//默认导出","\r\n//组件名首字母一定要大写\r\nimport React, { Component } from 'react'\r\n\r\nexport default class Control extends Component {\r\n    //声明状态\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            inpValue:''\r\n        }\r\n    }\r\n    handleChange=(e)=>{\r\n        this.setState({inpValue:e.target.value})\r\n    }\r\n    componentDidMount(){\r\n        //input是个属性\r\n        this.input.focus();\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                 <input\r\n                 ref={\r\n                     inp=>this.input = inp\r\n                 }\r\n                  value={this.state.inpValue}\r\n                  type='text'\r\n                  onChange={this.handleChange}\r\n                  />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nconst Context = React.createContext();\r\n\r\nexport default Context;","import React, { Component } from 'react'\r\nimport './Control.css'\r\n\r\nexport default class Todolist extends Component {\r\n    constructor(){\r\n         super()\r\n         this.state={\r\n             inpValue:'',\r\n             todos:[\r\n                 {title:'123',done:true},\r\n                 {title:'234',done:false},\r\n                 {title:'345',done:false},\r\n                 {title:'456',done:true}\r\n                ]\r\n         }\r\n\r\n    }\r\n    handleChange=(e)=>{\r\n        this.setState({inpValue:e.target.value})\r\n    }\r\n    addtodo=(e)=>{\r\n        // this.state.todos.push({title:this.state.inpValue})\r\n        \r\n        if(this.state.inpValue!=''){\r\n        this.setState({\r\n            // todos:this.state.todos\r\n            todos:[{\r\n                title:this.state.inpValue,\r\n                done:false\r\n            },\r\n            // inpValue:'',\r\n            ...this.state.todos\r\n        ]\r\n        },()=>{\r\n            localStorage.setItem('todos',JSON.stringify(this.state.todos))\r\n    })}\r\n}\r\n    delTodo=(idx)=>{\r\n        // this.state.todos.splice(idx,1);\r\n        // this.setState({todos:this.state.todos})\r\n        // let newTodos = JSON.parse(JSON.stringify(this.state.todos));\r\n        // this.setState({todos:newTodos})\r\n        this.setState({\r\n            todos:this.state.todos.filter((item,index)=>index!=idx),          \r\n        },()=>{\r\n            localStorage.setItem('todos',JSON.stringify(this.state.todos))\r\n        });\r\n    }\r\n\r\n    //标签选择\r\n    toggle=(index)=>{\r\n        let newTodos = JSON.parse(JSON.stringify(this.state.todos));\r\n        newTodos[index].done = !newTodos[index].done;\r\n        this.setState({todos:newTodos})\r\n    }\r\n    componentDidMount(){\r\n        //input是个属性\r\n        this.input.focus();\r\n       \r\n    }\r\n   componentDidUpdate(){\r\n        let todos = localStorage.getItem('todos');\r\n        if(todos){\r\n            this.setState({\r\n               todos: JSON.parse(todos)\r\n            })\r\n        }\r\n        return true\r\n    }\r\n    renderTodos=(done)=>{\r\n        return this.state.todos.map((todo,idx)=>{\r\n            if(done == todo.done){\r\n                    return   <li>\r\n                        <input\r\n                       \r\n                        ref={\r\n                            inp=>this.input = inp\r\n                        }\r\n                        onClick = {()=>this.toggle(idx)}//切换\r\n                        checked={done}\r\n                        type='checkbox'/>\r\n                        <span dangerouslySetInnerHTML={{__html:todo.title}}></span>\r\n                        <button\r\n                        onClick = {()=>this.delTodo(idx)}\r\n                        >删除</button>\r\n                    </li>\r\n                    }\r\n                }     \r\n            )\r\n    }\r\n    render() {\r\n        const {todos,inpValue}=this.state\r\n        let arr = todos.filter(item=>!item.done)\r\n        return (\r\n            <div>\r\n                <ul>\r\n                <label htmlFor = \"inp\">abcdef</label>\r\n\r\n                    <input \r\n                     id = \"inp\"\r\n                    type='text' \r\n                    onChange={this.handleChange}/>\r\n                    <button\r\n                    onClick={this.addtodo}\r\n                    >提交</button>\r\n                </ul>\r\n                \r\n                <h2>未完成{arr.length}</h2>\r\n                <ul>\r\n                    {this.renderTodos(false)}\r\n                </ul>\r\n                <h2>已完成{todos.filter(item=>item.done).length}</h2>\r\n                <ul>\r\n                    {this.renderTodos(true)}\r\n                </ul>\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\nimport Context from './Context'\r\n\r\nconst Demo02 = () => {\r\n    return (\r\n        <div>\r\n            <h2>Demo02</h2>\r\n            <Context.Consumer>\r\n                {\r\n                    ({data})=>data.map(item=><li key={item}>{item}</li>)\r\n                }\r\n            </Context.Consumer>\r\n            <Context.Consumer>\r\n                {\r\n                    ({changeData})=><button onClick={()=>changeData(123)}>点击</button>\r\n                }\r\n            </Context.Consumer>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Demo02","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Context from './Context'\r\nimport Demo02 from './Demo02'\r\n\r\nconst Demo01 = (props) => {\r\n    return (\r\n        <div style={{\r\n            width:100,\r\n            height:100,\r\n        }}>\r\n            <h2>Demo01</h2>\r\n            <ul>\r\n                <Context.Consumer>\r\n                    {\r\n                        ({data})=>data.map(\r\n                            item=><li key={item}>{item}</li>\r\n                        )\r\n                    }\r\n                </Context.Consumer>\r\n            </ul>\r\n            <Demo02 />\r\n        </div>\r\n    )\r\n}\r\n\r\nDemo01.propTypes = {\r\n    name: PropTypes.string.isRequired\r\n}\r\n\r\nDemo01.defaultProps = {\r\n    name: 'tom'\r\n}\r\n\r\nexport default Demo01\r\n// rcc\r\n// rafc\r\n// rafce","import React from 'react'\r\nimport Context from './Context'\r\nimport Demo01 from './Demo01';\r\nimport { render } from 'react-dom';\r\nconsole.log(Context);\r\n\r\nclass App extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            data:['hello','context'],\r\n        }\r\n    }\r\n    changeData = (newData)=>{\r\n        this.setState({data:[...this.state.data,newData]})\r\n    }\r\n    render(){\r\n        return (\r\n            <Context.Provider value={{\r\n                data:this.state.data,\r\n                changeData:this.changeData\r\n            }}>\r\n                <Demo01 />\r\n            </Context.Provider>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App","// heigher order Componentr\r\n// import React from 'react'\r\n// import { render } from '@testing-library/react';\r\n\r\n\r\n// const withFetch =(Com,url)=>{\r\n//     return class Topic extends Component{\r\n//         constructor(){\r\n//             super();\r\n//             this.state = {\r\n//                 data:''\r\n//             }\r\n//         }\r\n//         componentDidMount(){\r\n//             fetch(url)\r\n//             .then(res=>res.json())\r\n//             .then(res=>this.setState({data:res.data}))\r\n//         }\r\n//         render(){\r\n//             return <Com data={this.state.data}/>\r\n//         }\r\n//     }\r\n    \r\n// } \r\n\r\n\r\n\r\n// const { Component } = require(\"react\")\r\n\r\n// export const De=(props)=>{\r\n\r\n//         return <div>\r\n//             <h1>标题</h1>\r\n//             <div>{props.data.content}</div>\r\n//         </div>\r\n// }\r\n\r\n// export const Detail = withFetch(De,'https://cnodejs.org/api/v1/topic/5433d5e4e737cbe96dcef312');\r\n\r\n\r\n// const Ho = (props)=>{\r\n//     console.log(props.data);\r\n//     return <ul>\r\n//         {\r\n//             props.data.map((item)=><li>{item.title}</li>)\r\n//         }\r\n//     </ul>\r\n// }\r\n// const Hoc = withFetch(Ho,'https://cnodejs.org/api/v1/topics');\r\n// export default Hoc;\r\n\r\n\r\n\r\n\r\nimport React, { Component } from 'react';\r\n\r\nconst withFetch = (Com,url)=>{\r\n    return class Topic extends Component{\r\n        constructor(){\r\n            super();\r\n            this.state = {\r\n                data:[]\r\n            }\r\n        }\r\n        componentDidMount(){\r\n            fetch(url)\r\n            .then(res=>res.json())\r\n            .then(res=>this.setState({data:res.data}))\r\n        }\r\n        render(){\r\n            return <Com data={this.state.data}/>\r\n        }\r\n    }\r\n}\r\n\r\nconst De =(props)=>{\r\n    return <div>\r\n        <h1>标题</h1>\r\n        <div>{props.data.content}</div>\r\n    </div>\r\n}\r\n\r\nexport const Detail = withFetch(De,'https://cnodejs.org/api/v1/topic/5433d5e4e737cbe96dcef312');\r\n\r\n\r\nconst Ho = (props)=>{\r\n    console.log(props.data);\r\n    return <ul>\r\n        {\r\n            props.data.map((item)=><li>{item.title}</li>)\r\n        }\r\n    </ul>\r\n}\r\nconst Hoc = withFetch(Ho,'https://cnodejs.org/api/v1/topics')\r\nexport default Hoc;","import React, { Component } from 'react';\r\nclass Input extends Component {\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <input\r\n                    ref={this.props.refs}\r\n                    value={this.props.value}\r\n                    onChange={this.props.handleChange}\r\n                    type=\"text\"\r\n                />\r\n                <button onClick={this.props.addTodo}>\r\n                    添加\r\n                </button>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Input","import React, { Component } from 'react'\r\nclass List extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    renderTodos=(done)=>{\r\n        return this.props.todos.map((todo,idx)=>{\r\n            if(done == todo.done){\r\n                    return   <li>\r\n                        <input\r\n                        onClick = {()=>this.props.toggle(idx)}//切换\r\n                        checked={done}\r\n                        type='checkbox'/>\r\n                        <span dangerouslySetInnerHTML={{__html:todo.title}}></span>\r\n                        <button\r\n                        onClick = {()=>this.props.delTodo(idx)}\r\n                        >删除</button>\r\n                    </li>\r\n                    }\r\n                }     \r\n            )\r\n    }\r\n    render() {\r\n        const td =this.props.todos;\r\n\r\n        return (\r\n            \r\n            <div>\r\n                <h2>未完成{td.filter(item=>!item.done).length}</h2>\r\n                <ul>\r\n                    {this.renderTodos(false)}\r\n                </ul>\r\n                <h2>已完成{td.filter(item=>item.done).length}</h2>\r\n                <ul>\r\n                    {this.renderTodos(true)}\r\n                </ul>\r\n            </div>\r\n            \r\n        )\r\n    }\r\n\r\n}\r\nexport default List","import React, { Component } from 'react';\r\nimport Input from './Input';\r\nimport List from './List'\r\n\r\n\r\nexport default class TodoList extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            inpValue:'',\r\n            todos:[\r\n                {title:'123',done:true},\r\n                {title:'234',done:false},\r\n                {title:'345',done:false},\r\n                {title:'456',done:true}\r\n               ]\r\n        }\r\n    }\r\n        handleChange=(e)=>{\r\n            this.setState({inpValue:e.target.value})\r\n        }\r\n        \r\n        addTodo = () => {\r\n            if (this.state.inpValue !== '') {\r\n                this.setState({\r\n                    todos: [\r\n                        {\r\n                            title: this.state.inpValue,\r\n                            done: false\r\n                        },\r\n                        ...this.state.todos\r\n                    ]\r\n                })\r\n            } else {\r\n                return;\r\n            }\r\n            this.state.inpValue = '';\r\n        }\r\n        delTodo=(idx)=>{\r\n            this.setState({\r\n                todos:this.state.todos.filter((item,index)=>index!=idx),          \r\n            },()=>{\r\n                localStorage.setItem('todos',JSON.stringify(this.state.todos))\r\n            });\r\n        }\r\n        componentDidMount(){\r\n            //input是个属性\r\n            this.input.focus();\r\n            let todos = localStorage.getItem('todos');\r\n            if (todos) {\r\n                this.setState({\r\n                    todos: JSON.parse(todos)\r\n                })\r\n            }\r\n            return true\r\n        }\r\n        componentDidUpdate(){\r\n            localStorage.setItem(\r\n                'todos',\r\n                JSON.stringify(this.state.todos)\r\n            )\r\n        }\r\n        toggle=(index)=>{\r\n            let newTodos = JSON.parse(JSON.stringify(this.state.todos));\r\n            newTodos[index].done = !newTodos[index].done;\r\n            this.setState({todos:newTodos})\r\n        }\r\n\r\n       \r\n        render() {\r\n            const { todos, inpValue } = this.state;\r\n            return (\r\n                <div>\r\n                <Input \r\n                    refs={inp => this.input = inp} \r\n                    addTodo={this.addTodo}\r\n                    handleChange={this.handleChange}\r\n                    value={this.state.inpValue}/>\r\n                <List \r\n                    delTodo={this.delTodo}\r\n                    toggle = {this.toggle}\r\n                    todos = {this.state.todos}/>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Home from './page/home';\nimport Control from './components/Control';\nimport Todolist from './components/Todolist';\nimport Dome01 from './page/Demo01';\nimport App from './page/App';\nimport Context from './page/Context';\nimport Hoc,{Detail} from './page/Hoc';\nimport Hook from './page/Hook';\nimport TodoList from './homework/TodoList';\n\n\n\n\nReactDOM.render(\n  //<Home data='abc'/>,\n  //<Control/>,\n  // <Todolist/>,\n  // <Dome01 name=\"123\"/>,\n  // <div><Hoc/><Detail/></div>,\n  <TodoList/>,\n  document.getElementById('root')\n);\n\n\n\n\n//react-dom\n  // let ReactDOM = {\n  //   render(eleobj,container){\n  //     const{type,props}=eleobj;\n  //     let ele = document.createElement(type);\n\n  //     for (const prop in props) {\n  //       if(prop =='children'){\n\n  //           if(typeof props.children=='string'){\n  //             const textNode = document.createTextNode(child);\n  //             ele.appendChild(textNode);\n  //             break;\n  //           }\n  //           props.children.forEach(child=>{\n  //             if(typeof props.children=='string'){\n  //               const textNode = document.createTextNode(child);\n  //               ele.appendChild(textNode);\n  //             }else{\n  //               ReactDOM.render(child,ele);\n  //             }\n  //           })\n\n  //       }else{\n  //         ele[prop] = props[prop];\n  //       }\n  //     }\n  //     container.appendChild(ele);\n  //   }\n  // }\n//\n\n// setInterval(() => {\n//   let ele = <h1 id = \"title\" className='tit'><div>hello</div> react\n//   <div>hello js</div>\n//   <div>当前时间</div>\n//   {\n//     new Date().toLocaleString()\n//   }\n//   </h1>\n\n// ReactDOM.render(\n//   ele,\n//   document.getElementById('root')\n// );\n// }, 1000);\n\n\n//组件声明(函数组件)\n//ui组件，木偶组件\n// function APP(props){\n//    const{ title,id} = props;\n//   return <div>\n//     <div>\n//       {/*  两种写法 */}\n//       {/* {props.title} */}\n//       {title}\n//     </div>\n//     <div>\n//       {/* world */}\n//       {id}\n//     </div>\n//   </div>\n// }\n\n//智能组价（类组件）\n// class Demo extends React.Component{\n//   constructor(){\n//     super();\n//     this.state={\n//       name:'wb'\n//     }\n//     setTimeout(() => {\n//       this.setState({name:'zgx'});\n//     }, 3000);\n//   }\n//   render(){\n//     return<div>\n//       <APP title=\"任意值\" id=\"app\"></APP>\n//       <APP title={this.state.name} id=\"app\"></APP>\n//     </div>\n//   }\n// }\n// class Demo extends React.Component{\n//   render(){\n//     return <div>\n//       <APP title=\"任意值\" id=\"app\"></APP>\n//       <APP title=\"任意值\" id=\"app\"></APP>\n//       <APP title=\"任意值\" id=\"app\"></APP>\n//       <APP title=\"任意值\" id=\"app\"></APP>\n//     </div>\n//   }\n// }\n// ReactDOM.render(\n//   <Demo/>,\n//   document.getElementById('root')\n// )\n \n// class home extends React.Component{\n//   constructor(){\n//     super();\n//     this.state = {\n//       data:[]\n//     }\n//     fetch('https://cnodejs.org/api/v1/topics')\n//     .then(res=>res.json())\n//     .then(({data})=>{\n//       this.setState({data});\n//     })\n//   }\n  // setTimeout(()=>{\n  //   this.setState({data:[5,6,7,8]});\n  // },500);\n//    render(){\n//      const {data} = this.state;\n//     return\n//     <ul>\n//         {\n//         data.map(\n//           (item)=><li>{item}</li>\n//         )\n//         }\n//      </ul>\n//    }\n//   }\n// ReactDOM.render(\n//   <home/>,\n//   document.getElementById('root')\n// );\n// 组件\n// 1.函数定义组件：没有什么逻辑\n// UI组件（展示）组件，木偶组件\n// function App(props){\n//   const {title,id} = props;\n//   return <div>\n//     <h1>App组件内容</h1>\n//     <div>{title}</div>\n//     <div>{id}</div>\n//     <div>hello</div>\n//   </div>\n// }\n// ReactDOM.render(\n//   <App title = 'abc' id='app'/>,  //可传任意值\n//   document.getElementById('root')\n// );\n\n// 2.智能组件——类组件 生命周期\n// class Demo extends React.Component{\n//   constructor(){\n//     super();\n//     // 声明状态\n//     this.state = {\n//       name:'tom'\n//     }\n//     setTimeout(()=>{\n//       this.setState({name:'jerry'})\n//     },500)\n//   }\n//   render(){\n//     return <div>\n//       <div>name:{this.state.name}</div>\n//       <App title = {this.state.name} id='app'/>\n//     </div>\n//   }\n// }\n// ReactDOM.render(\n//   <Demo title = 'abc' id='app'/>,  //可传任意值\n//   document.getElementById('root')\n// );\n\n// // 还有一个时间的练一下课下\n// class Home extends React.Component{\n//   constructor(){\n//     super();\n//     this.state = {\n//       data:[1,2,3]\n//     }\n//     setTimeout(()=>{\n//       this.setState({data:[5,6,7,8,9]})\n//     },1000)\n//   }\n//   render(){\n//     return <ul>\n//       {\n//         this.state.data.map(\n//           (item)=><li>{item}</li>\n//         )\n//       }\n//     </ul>\n//   }\n// }\n// ReactDOM.render(\n//   <Home />,\n//   document.getElementById('root')\n// );\n// list\n// const list = (props)=>{\n//   return <ul>\n//     {\n//       props.data.map(\n//         (item)=><li>{item.title}</li>\n//       )\n//     }\n//   </ul>\n// }\n\n// class Home extends React.Component{\n//   constructor(){\n//     super();\n//     this.state = {\n//       data:[]\n//     }\n//     fetch('https://cnodejs.org/api/v1/topics')\n//     .then(res=>res.json())\n//     .then( ({data}) => {\n//       this.setState({data})\n//     })\n//   }\n//   render(){\n//     const { data } = this.state;\n//     return <list data={data}/>\n//   }\n// }\n// ReactDOM.render(\n//   <Home />,\n//   document.getElementById('root')\n// );\n\n\n\n"],"sourceRoot":""}